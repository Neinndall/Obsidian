@using CommunityToolkit.HighPerformance;
@using LeagueToolkit.Core.Wad;
@using LeagueToolkit.Toolkit.Ritobin;
@using Obsidian.Data.Wad;
@using System.Text;
@using Obsidian.Services;
@using BlazorMonaco;
@using BlazorMonaco.Editor;
@using MonacoEditorGlobal = BlazorMonaco.Editor.Global;
@using Obsidian.Utils;

<style>
    .monaco-editor-container {
        height: 100%;
    }
</style>

<div class="@(_isEnabled ? "wad-file-preview-text" : "wad-file-preview-text-hidden")">
    <StandaloneCodeEditor @ref="_codeEditor" Id="@WadPreviewUtils.CODE_EDITOR_ID"
                          ConstructionOptions="EditorConstructionOptions"
                          OnDidInit="OnDidInit" />
</div>

@code {
    [Inject]
    public IJSRuntime Js { get; set; }

    [Inject]
    public HashtableService Hashtable { get; set; }

    [Parameter]
    public WadTreeModel WadTree { get; set; }

    private bool _isEnabled => this.WadTree.CurrentPreviewType is WadFilePreviewType.Text;

    private StandaloneCodeEditor _codeEditor = null;

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
            {
                Theme = "vs-dark",
                AutomaticLayout = true,
                Value = "",
                ReadOnly = true,
                CodeLens = true,
            };
    }

    private async Task OnDidInit()
    {
        await this.Js.InvokeVoidAsync("registerRitobinLanguage");
    }

    public async Task Preview(Stream stream, string language)
    {
        using StreamReader reader = new(stream);

        await this._codeEditor.SetValue(reader.ReadToEnd());
        await MonacoEditorGlobal.SetModelLanguage(await this._codeEditor.GetModel(), language);
    }

    public async Task PreviewRitobin(Stream stream)
    {
        using RitobinWriter writer =
            new(
                this.Hashtable.BinObjects,
                this.Hashtable.BinClasses,
                this.Hashtable.BinProperties,
                this.Hashtable.BinHashes,
                this.Hashtable.Hashes
            );

        await this._codeEditor.SetValue(writer.WritePropertyBin(new(stream)));
        await MonacoEditorGlobal.SetModelLanguage(await this._codeEditor.GetModel(), "ritobin");
    }
}
